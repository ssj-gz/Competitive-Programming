BRIEF DESCRIPTION
=================

A binary string of length N (1 <= N <= 1'000'000) is a string consisting of N 0's and 1's e.g. S = 101011 is a binary string of length 6.

For a binary string S, let num0s(S) be the number of 0's in S, and num1s(S) be the number of 1's e.g. num0s(101011) = 2, num1s(101011) = 4.
Let the *heaviness* of S be max(num0s(S), num1s(S)) e.g. heaviness(101011) = max(2, 4) = 4.

Let D(S) be the set of all *distinct* substrings of S.

Compute the sum

$\Sigma_{s \in D(S)} \textit{heaviness}(s)$

APPROACH (SKETCH)
=================

NB: A full, Editorial-style solution is under development.

Whenever we see "distinct substrings", we should probably think "suffix automata".  The high constraints for N suggest that we need
an O(N) (rather than O(N log N)) algorithm for this - my implementation uses Ukkonen's Algorithm (https://en.wikipedia.org/wiki/Ukkonen's_algorithm), with
all final states made explicit.

Following a DFS character-by-character over the suffix automation representing the distinct substrings of S will generate all distinct substrings, and
it is easy to incrementally compute the heaviness of each substring generated so far, giving us the required result: however, this would be
O(N^2), which will not do.

For a state s in the automaton, let word(s) be the unique substring of S that, when followed, leads to s.  For non-root s, let pred(s) be the predecessor state of s 
and begin(s), end(s) the indices in S such that following S[begin(s), end(s)] from pred(s) brings us to s.


# TODO - this all requires extensive checking!

Define blah(num0sInPrefix, num1sInPrefix, suffixBeginIndex) = $\Sigma_{i = \textit{suffixBeginIndex}}^{N} \textit{heaviness}(\textit{num0sInPrefix}\times 0.\textit{num1sInPrefix }\times 1.S[\textit{suffixBeginIndex} \dots])$

It can be shown that the answer we need is the sum over all states of non-root states s of the following:

    -blah(num0s(word(pred(s)), num1s(word(pred(s)), begin(pred(s), s))
    +blah(num0s(word(pred(s)), num1s(word(pred(s)), begin(pred(s), s)) # Completely wrong, blah blah.

    




