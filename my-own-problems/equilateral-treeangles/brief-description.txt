BRIEF DESCRIPTION
=================

You are given a tree T with N nodes.  Each node is either "suitable" or "not suitable".  For a pair of nodes u, v of T, define dist(u, v) to be the length
of the shortest path between nodes u and v in T.

Count the number of triples (p, q, r) where p, q and r are nodes of T; p, q and r and all "suitable", and dist(p, q) = dist(q, r) = dist(r, p).

APPROACH (SKETCH)
=================

NB: An Editorial-style write-up is under development.  The proofs of correctness and worst-case performance are very non-trivial, and so are omitted from this Sketch Approach, which
    is already too long!  Please forgive the handwavy-ness and vagueness - the Editorial-style write-up will be more complete and rigorous! 

Pick an arbitrary vertex R as the root of a tree, and do a DFS from R.

Let (p, q, r) be such a triple as described in the Brief Description i.e. where p, q, r are all suitable, and dist(p, q) = dist(q, r) = dist(r, p).  Then it can be shown that (p, q, r) will fall into one of two types:

Type i) - p, q, r have the same lca, from which they are equidistant e.g.


                        R
                       /|\
                        ...
                           X = lca(p, q, r)
                         / | \
                        .......
                       /   |   \
                      p    q    r   <-- dist(p, x) = dist(q, x) = dist(r, x); p, q and r all have same distance from R (aka "height").

Type ii) - the two "lowest" nodes - say q and r wlog, are equidistant from their lca = X.  p is *not* a descendent of X, but dist(p, X) = dist(q, X) (= dist(r, X))


                        R
                       /|\
                        ...
                       /\
                      ... ...
                     /    \
                    p     ... 
                           |
                           X = lca(q, r)
                         /   \
                        .......
                       /       \
                      q         r   <-- dist(p, X) = dist(r, X); p, q have the same distance from R.

Type i) is the easiest to compute; Type ii) is harder and is computed in two phases: the first phase is shared with the
computation of the number of Type i) triplets; the second is separate and uses Centroid Decomposition.

There's a reasonably well known algorithm for calculating, for each node v, the set of all descendents of v in O(N log N):

findDescendents(root)
    set_of_descendents = empty-set
    for each child c of root:
        set_of_descendents_of_child = findDescendents(c)
        if |set_of_descendents_of_child| > |set_of_descendents|:
            swap set_of_descendents with set_of_descendents_of_child (O(1)).

        for each node in set_of_descendents_of_child:
            add node to set_of_descendents

    return set_of_descendents

The algorithm looks like it's O(N^2) worst case, but the fact that we always "copy" the smaller set into the larger actually makes it 
asymptotically better (O(N log N)), for the same reason as disjoint-union-by-size is O(N log N): https://en.wikipedia.org/wiki/Disjoint-set_data_structure#by_size

For a node v, let height(v) = dist(R, v).  We adapt the algorithm to compute not the set of descendents of each node v, but a count (map) of *heights of descendents of suitable 
nodes of v* i.e. a map where the keys are heights and the values are the number of descendents of v which are suitable and have that height; it can be shown that this also is achievable in worst case O(N log N).

With some more book-keeping, it can be shown that we can extract, in O(N log N) time and space, for all nodes v, for all heights h [NB: obviously such heights are stored sparsely, else the space requirements would be O(N^2)]:

    the number of pairs of descendents (u', v') of v such that:
        * u' and v' are both suitable;
        * lca(u', v') = v; and
        * height(u') = height(v') = h (and so: dist(u', v) = dist(v', v))

and also

    the number of triples (u', v', w') of v such that
        * u', v' and w' are all suitable;
        * lca(u', v') = lca(u', w') = lca(v', w') = v; and
        * height(u') = height(v') = height(w') = h (and so: dist(u', v) = dist(v', v) = dist(w', v))

This completes Phase one of two.

We see that the latter count of triples is the number of triples of Type i) (more precisely - it is the number of such triples divided by the number of permutations of a triple, 3! - see later).

The former is a step towards the computation of the number of Type ii) triples - referring to the definition of Type ii), we've found, for each X, the number of q's and r's with a given
height h (which equates to a distance d from X: height(q) - height(x)) an lca X, and now we just need to find for each X and h the number of p's such that dist(p, X) = height(q) - height(X).  We do this latter step via Centroid Decomposition.

More precisely, Phase one gives us, for each node v, a map from heights to number of pairs of descendents called v.numPairsWithHeightWithLCA_v - all in O(N log N) time and space.

We then perform Centroid Decomposition with an efficient DistTracker class that implements the following API:

    * addDistance(newDistance) - adds the distance to the list of tracked distances in O(1).
    * addToAllDistances(distanceIncrease) - adds distanceIncrease to each of the tracked distances in O(1).
    * getNumWithDistance(distance) - return the number of tracked distances whos current value is precisely distance in O(1).     

A simple combination of CD and DistTracker allows us to finally "complete" the "q's" and "r's" found in Phase one with the "p's" necessary to form a complete, Type ii)-triplet in O(N x (log N) x (log N)).

It can be further shown that if a triplet (p, q, r) of either type (i) or ii)) is counted by the algorithm, then none of its (3! - 1) other permutations - (p, r, q); (r, p, q) etc - will be counted, so simply multiplying the count of Type i) and Type ii) triplets by 3! gives us the final result.

The whole algorithm runs in O(N x (log N) x (log N)) time with O(N log N) space.

